/// Types and constants of System z architecture
module capstone.sysz;

import std.exception: enforce;
import std.conv: to;

import capstone.internal;
import capstone.impl: CapstoneImpl, InstructionImpl;
import capstone.api: Arch;
import capstone.utils;

/// Architecture-specific Capstone variant
alias CapstoneSysz = CapstoneImpl!(Arch.sysz);
/// Architecture-specific instruction variant
alias InstructionSysz = InstructionImpl!(Arch.sysz);

/** Instruction's operand referring to memory

This is associated with the `SyszOpType.mem` operand type
*/
struct SyszOpMem {
	SyszRegister base;	/// Base register
	SyszRegister index; /// Index register
	ulong length; 		/// BDLAddr operand
	long disp;	  		/// Displacement/offset value

	this(sysz_op_mem internal){
		base = internal.base.to!SyszRegister;
		index = internal.index.to!SyszRegister;
		length = internal.length;
		disp = internal.disp;
	}
}

/// Tagged union of possible operand types
alias SyszOpValue = TaggedUnion!(SyszRegister, "reg", long, "imm", SyszOpMem, "mem");

/// Instruction's operand
struct SyszOp {
    SyszOpType type;   /// Operand type
    SyszOpValue value; /// Operand value of type `type`
    alias value this;  /// Convenient access to value (as in original bindings)

    package this(cs_sysz_op internal){
        type = internal.type;
        final switch(internal.type) {
            case SyszOpType.invalid:
                break;
            case SyszOpType.reg, SyszOpType.acreg:
                value.reg = internal.reg;
                break;
            case SyszOpType.imm:
                value.imm = internal.imm;
                break;
            case SyszOpType.mem:
                value.mem = SyszOpMem(internal.mem);
                break;
        }
    }
}

/// System z-specific information about an instruction
struct SyszInstructionDetail {
	SyszCc cc;		   /// Code condition
    SyszOp[] operands; /// Operands for this instruction.

    package this(cs_arch_detail arch_detail){
		this(arch_detail.sysz);
	}
    package this(cs_sysz internal){
		cc = internal.cc;
        foreach(op; internal.operands[0..internal.op_count])
            operands ~= SyszOp(op);
    }
}

//=============================================================================
// Constants
//=============================================================================

/// Operand type for instruction's operands
enum SyszOpType {
	invalid = 0, /// Uninitialized
	reg, 		 /// Register operand
	imm, 		 /// Immediate operand
	mem, 		 /// Memory operand
	acreg = 64,	 /// Access register operand
}

/// Enums corresponding to SystemZ condition codes
enum SyszCc {
	invalid = 0,

	o,
	h,
	nle,
	l,
	nhe,
	lh,
	ne,
	e,
	nlh,
	he,
	nl,
	le,
	nh,
	no,
}

/** SystemZ registers

Note that the registers 0..15 are prefixed by r, i.e. the are named r0..r15
*/
enum SyszRegister {
	invalid = 0,

	r0, 
	r1, 
	r2, 
	r3, 
	r4, 
	r5, 
	r6, 
	r7, 
	r8, 
	r9, 
	r10,
	r11,
	r12,
	r13,
	r14,
	r15,
	cc,
	f0,
	f1,
	f2,
	f3,
	f4,
	f5,
	f6,
	f7,
	f8,
	f9,
	f10,
	f11,
	f12,
	f13,
	f14,
	f15,

	r0l,
}

/// SystemZ instruction
enum SyszInstructionId {
	invalid = 0,

	a,
	adb,
	adbr,
	aeb,
	aebr,
	afi,
	ag,
	agf,
	agfi,
	agfr,
	aghi,
	aghik,
	agr,
	agrk,
	agsi,
	ah,
	ahi,
	ahik,
	ahy,
	aih,
	al,
	alc,
	alcg,
	alcgr,
	alcr,
	alfi,
	alg,
	algf,
	algfi,
	algfr,
	alghsik,
	algr,
	algrk,
	alhsik,
	alr,
	alrk,
	aly,
	ar,
	ark,
	asi,
	axbr,
	ay,
	bcr,
	brc,
	brcl,
	cgij,
	cgrj,
	cij,
	clgij,
	clgrj,
	clij,
	clrj,
	crj,
	ber,
	je,
	jge,
	loce,
	locge,
	locgre,
	locre,
	stoce,
	stocge,
	bhr,
	bher,
	jhe,
	jghe,
	loche,
	locghe,
	locgrhe,
	locrhe,
	stoche,
	stocghe,
	jh,
	jgh,
	loch,
	locgh,
	locgrh,
	locrh,
	stoch,
	stocgh,
	cgijnlh,
	cgrjnlh,
	cijnlh,
	clgijnlh,
	clgrjnlh,
	clijnlh,
	clrjnlh,
	crjnlh,
	cgije,
	cgrje,
	cije,
	clgije,
	clgrje,
	clije,
	clrje,
	crje,
	cgijnle,
	cgrjnle,
	cijnle,
	clgijnle,
	clgrjnle,
	clijnle,
	clrjnle,
	crjnle,
	cgijh,
	cgrjh,
	cijh,
	clgijh,
	clgrjh,
	clijh,
	clrjh,
	crjh,
	cgijnl,
	cgrjnl,
	cijnl,
	clgijnl,
	clgrjnl,
	clijnl,
	clrjnl,
	crjnl,
	cgijhe,
	cgrjhe,
	cijhe,
	clgijhe,
	clgrjhe,
	clijhe,
	clrjhe,
	crjhe,
	cgijnhe,
	cgrjnhe,
	cijnhe,
	clgijnhe,
	clgrjnhe,
	clijnhe,
	clrjnhe,
	crjnhe,
	cgijl,
	cgrjl,
	cijl,
	clgijl,
	clgrjl,
	clijl,
	clrjl,
	crjl,
	cgijnh,
	cgrjnh,
	cijnh,
	clgijnh,
	clgrjnh,
	clijnh,
	clrjnh,
	crjnh,
	cgijle,
	cgrjle,
	cijle,
	clgijle,
	clgrjle,
	clijle,
	clrjle,
	crjle,
	cgijne,
	cgrjne,
	cijne,
	clgijne,
	clgrjne,
	clijne,
	clrjne,
	crjne,
	cgijlh,
	cgrjlh,
	cijlh,
	clgijlh,
	clgrjlh,
	clijlh,
	clrjlh,
	crjlh,
	blr,
	bler,
	jle,
	jgle,
	locle,
	locgle,
	locgrle,
	locrle,
	stocle,
	stocgle,
	blhr,
	jlh,
	jglh,
	loclh,
	locglh,
	locgrlh,
	locrlh,
	stoclh,
	stocglh,
	jl,
	jgl,
	locl,
	locgl,
	locgrl,
	locrl,
	loc,
	locg,
	locgr,
	locr,
	stocl,
	stocgl,
	bner,
	jne,
	jgne,
	locne,
	locgne,
	locgrne,
	locrne,
	stocne,
	stocgne,
	bnhr,
	bnher,
	jnhe,
	jgnhe,
	locnhe,
	locgnhe,
	locgrnhe,
	locrnhe,
	stocnhe,
	stocgnhe,
	jnh,
	jgnh,
	locnh,
	locgnh,
	locgrnh,
	locrnh,
	stocnh,
	stocgnh,
	bnlr,
	bnler,
	jnle,
	jgnle,
	locnle,
	locgnle,
	locgrnle,
	locrnle,
	stocnle,
	stocgnle,
	bnlhr,
	jnlh,
	jgnlh,
	locnlh,
	locgnlh,
	locgrnlh,
	locrnlh,
	stocnlh,
	stocgnlh,
	jnl,
	jgnl,
	locnl,
	locgnl,
	locgrnl,
	locrnl,
	stocnl,
	stocgnl,
	bnor,
	jno,
	jgno,
	locno,
	locgno,
	locgrno,
	locrno,
	stocno,
	stocgno,
	bor,
	jo,
	jgo,
	loco,
	locgo,
	locgro,
	locro,
	stoco,
	stocgo,
	stoc,
	stocg,
	basr,
	br,
	bras,
	brasl,
	j,
	jg,
	brct,
	brctg,
	c,
	cdb,
	cdbr,
	cdfbr,
	cdgbr,
	cdlfbr,
	cdlgbr,
	ceb,
	cebr,
	cefbr,
	cegbr,
	celfbr,
	celgbr,
	cfdbr,
	cfebr,
	cfi,
	cfxbr,
	cg,
	cgdbr,
	cgebr,
	cgf,
	cgfi,
	cgfr,
	cgfrl,
	cgh,
	cghi,
	cghrl,
	cghsi,
	cgr,
	cgrl,
	cgxbr,
	ch,
	chf,
	chhsi,
	chi,
	chrl,
	chsi,
	chy,
	cih,
	cl,
	clc,
	clfdbr,
	clfebr,
	clfhsi,
	clfi,
	clfxbr,
	clg,
	clgdbr,
	clgebr,
	clgf,
	clgfi,
	clgfr,
	clgfrl,
	clghrl,
	clghsi,
	clgr,
	clgrl,
	clgxbr,
	clhf,
	clhhsi,
	clhrl,
	cli,
	clih,
	cliy,
	clr,
	clrl,
	clst,
	cly,
	cpsdr,
	cr,
	crl,
	cs,
	csg,
	csy,
	cxbr,
	cxfbr,
	cxgbr,
	cxlfbr,
	cxlgbr,
	cy,
	ddb,
	ddbr,
	deb,
	debr,
	dl,
	dlg,
	dlgr,
	dlr,
	dsg,
	dsgf,
	dsgfr,
	dsgr,
	dxbr,
	ear,
	fidbr,
	fidbra,
	fiebr,
	fiebra,
	fixbr,
	fixbra,
	flogr,
	ic,
	icy,
	iihf,
	iihh,
	iihl,
	iilf,
	iilh,
	iill,
	ipm,
	l,
	la,
	laa,
	laag,
	laal,
	laalg,
	lan,
	lang,
	lao,
	laog,
	larl,
	lax,
	laxg,
	lay,
	lb,
	lbh,
	lbr,
	lcdbr,
	lcebr,
	lcgfr,
	lcgr,
	lcr,
	lcxbr,
	ld,
	ldeb,
	ldebr,
	ldgr,
	ldr,
	ldxbr,
	ldxbra,
	ldy,
	le,
	ledbr,
	ledbra,
	ler,
	lexbr,
	lexbra,
	ley,
	lfh,
	lg,
	lgb,
	lgbr,
	lgdr,
	lgf,
	lgfi,
	lgfr,
	lgfrl,
	lgh,
	lghi,
	lghr,
	lghrl,
	lgr,
	lgrl,
	lh,
	lhh,
	lhi,
	lhr,
	lhrl,
	lhy,
	llc,
	llch,
	llcr,
	llgc,
	llgcr,
	llgf,
	llgfr,
	llgfrl,
	llgh,
	llghr,
	llghrl,
	llh,
	llhh,
	llhr,
	llhrl,
	llihf,
	llihh,
	llihl,
	llilf,
	llilh,
	llill,
	lmg,
	lndbr,
	lnebr,
	lngfr,
	lngr,
	lnr,
	lnxbr,
	lpdbr,
	lpebr,
	lpgfr,
	lpgr,
	lpr,
	lpxbr,
	lr,
	lrl,
	lrv,
	lrvg,
	lrvgr,
	lrvr,
	lt,
	ltdbr,
	ltebr,
	ltg,
	ltgf,
	ltgfr,
	ltgr,
	ltr,
	ltxbr,
	lxdb,
	lxdbr,
	lxeb,
	lxebr,
	lxr,
	ly,
	lzdr,
	lzer,
	lzxr,
	madb,
	madbr,
	maeb,
	maebr,
	mdb,
	mdbr,
	mdeb,
	mdebr,
	meeb,
	meebr,
	mghi,
	mh,
	mhi,
	mhy,
	mlg,
	mlgr,
	ms,
	msdb,
	msdbr,
	mseb,
	msebr,
	msfi,
	msg,
	msgf,
	msgfi,
	msgfr,
	msgr,
	msr,
	msy,
	mvc,
	mvghi,
	mvhhi,
	mvhi,
	mvi,
	mviy,
	mvst,
	mxbr,
	mxdb,
	mxdbr,
	n,
	nc,
	ng,
	ngr,
	ngrk,
	ni,
	nihf,
	nihh,
	nihl,
	nilf,
	nilh,
	nill,
	niy,
	nr,
	nrk,
	ny,
	o,
	oc,
	og,
	ogr,
	ogrk,
	oi,
	oihf,
	oihh,
	oihl,
	oilf,
	oilh,
	oill,
	oiy,
	or,
	ork,
	oy,
	pfd,
	pfdrl,
	risbg,
	risbhg,
	risblg,
	rll,
	rllg,
	rnsbg,
	rosbg,
	rxsbg,
	s,
	sdb,
	sdbr,
	seb,
	sebr,
	sg,
	sgf,
	sgfr,
	sgr,
	sgrk,
	sh,
	shy,
	sl,
	slb,
	slbg,
	slbr,
	slfi,
	slg,
	slbgr,
	slgf,
	slgfi,
	slgfr,
	slgr,
	slgrk,
	sll,
	sllg,
	sllk,
	slr,
	slrk,
	sly,
	sqdb,
	sqdbr,
	sqeb,
	sqebr,
	sqxbr,
	sr,
	sra,
	srag,
	srak,
	srk,
	srl,
	srlg,
	srlk,
	srst,
	st,
	stc,
	stch,
	stcy,
	std,
	stdy,
	ste,
	stey,
	stfh,
	stg,
	stgrl,
	sth,
	sthh,
	sthrl,
	sthy,
	stmg,
	strl,
	strv,
	strvg,
	sty,
	sxbr,
	sy,
	tm,
	tmhh,
	tmhl,
	tmlh,
	tmll,
	tmy,
	x,
	xc,
	xg,
	xgr,
	xgrk,
	xi,
	xihf,
	xilf,
	xiy,
	xr,
	xrk,
	xy,
}

/// Group of SystemZ instructions
enum SyszInstructionGroup {
	invalid = 0,

	// Generic groups
	// All jump instructions (conditional+direct+indirect jumps)
	jump,

	// Architecture-specific groups
	distinctops = 128,
	fpextension,
	highword,
	interlockedaccess1,
	loadstoreoncond,
}